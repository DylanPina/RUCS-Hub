generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id
  createdAt             DateTime       @default(now())
  lastEmailVerification DateTime       @default(now())
  lastPasswordReset     DateTime       @default(now())
  reviews               Review[]
  votes                 Vote[]
  reports               Report[]
  notifications         Notification[]
  subscriptions         Subscription[]
}

model Professor {
  id            Int            @id @default(autoincrement())
  firstName     String
  lastName      String
  reviews       Review[]
  sections      Section[]
  subscribers   Subscription[]
  notifications Notification[]

  @@unique([firstName, lastName])
}

model Section {
  sectionNumber String
  course        Course    @relation(fields: [courseCode, subjectCode], references: [code, subjectCode], onDelete: Cascade)
  courseCode    Int
  subjectCode   String
  professor     Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId   Int
  term          Int
  year          Int

  @@id([sectionNumber, courseCode, subjectCode, professorId, term, year])
}

model Course {
  code          Int
  name          String
  prereqs       String[]
  synopsis      String?
  credits       Int?
  subject       Subject        @relation(fields: [subjectCode], references: [code], onDelete: Cascade)
  subjectCode   String
  reviews       Review[]
  sections      Section[]
  subscribers   Subscription[]
  notifications Notification[]

  @@id(name: "subjectCourseCode", [code, subjectCode])
}

model Review {
  id                        Int            @id @default(autoincrement())
  user                      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String
  semester                  Int
  year                      Int
  course                    Course         @relation(fields: [courseCode, subjectCode], references: [code, subjectCode], onDelete: Cascade)
  courseCode                Int
  subjectCode               String
  title                     String
  content                   String
  createdAt                 DateTime       @default(now())
  lastModified              DateTime       @default(now())
  rating                    Int?
  votes                     Vote[]
  difficultyRating          Int?
  professor                 Professor?     @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId               Int?
  professorQualityRating    Int?
  professorDifficultyRating Int?
  lectureRating             Int?
  bookRating                Int?
  piazzaRating              Int?
  workload                  Int?
  reports                   Report[]
  notifications             Notification[]
  subscribers               Subscription[]
}

model Vote {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  review        Review         @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId      Int
  upvote        Boolean
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model Report {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int
  category  String
  content   String
  createdAt DateTime @default(now())
}

model Notification {
  id          Int        @id @default(autoincrement())
  recipient   User       @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  vote        Vote?      @relation(fields: [voteId], references: [id], onDelete: Cascade)
  voteId      Int?
  review      Review?    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId    Int?
  professor   Professor? @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId Int?
  course      Course?    @relation(fields: [courseCode, subjectCode], references: [code, subjectCode], onDelete: Cascade)
  courseCode  Int?
  subjectCode String?
  createdAt   DateTime   @default(now())
  read        Boolean    @default(false)
}

model Subscription {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  course      Course?    @relation(fields: [courseCode, subjectCode], references: [code, subjectCode], onDelete: Cascade)
  courseCode  Int?
  subjectCode String?
  professor   Professor? @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId Int?
  review      Review?    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId    Int?
  createdAt   DateTime   @default(now())
}

model Subject {
  code    String   @id
  name    String
  courses Course[]
}
