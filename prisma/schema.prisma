generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String      @id
  createdAt DateTime @default(now())
  lastEmailVerification DateTime @default(now())
  lastPasswordReset     DateTime @default(now())
  reviews   Review[]
  votes     Vote[]
}

model Professor {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  reviews   Review[]
  sections  Section[]
}

model Section {
  sectionNumber String
  course        Course    @relation(fields: [courseCode], references: [code], onDelete: Cascade)
  courseCode    Int
  professor     Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId   Int
  term          Int
  year          Int

  @@id([sectionNumber, courseCode, term, year])
}

model Course {
  code     Int       @id
  name     String
  prereqs  String[]
  synopsis String?
  credits  Int?
  reviews  Review[]
  sections Section[]
}

model Review {
  id                        Int        @id @default(autoincrement())
  user                      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String
  semester                  Int
  year                      Int
  course                    Course     @relation(fields: [courseCode], references: [code], onDelete: Cascade)
  courseCode                Int
  title                     String
  content                   String
  createdAt                 DateTime   @default(now())
  lastModified              DateTime   @default(now())
  rating                    Int?
  votes                     Vote[]
  difficultyRating          Int?
  professor                 Professor? @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId               Int?
  professorQualityRating    Int?
  professorDifficultyRating Int?
  lectureRating             Int?
  bookRating                Int?
  piazzaRating              Int?
  workload                  Int?
}

model Vote {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int
  upvote    Boolean
  createdAt DateTime @default(now())
}
